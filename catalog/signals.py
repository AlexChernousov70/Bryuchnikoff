# signals.py
from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import OrderCallBack, Order
from .telegram_bot import send_telegram_message
from asyncio import run
from django.conf import settings
from django.utils import timezone
import html
import logging
import re

logger = logging.getLogger(__name__)

TELEGRAM_BOT_API_KEY = settings.TELEGRAM_BOT_API_KEY
TELEGRAM_USER_ID = settings.TELEGRAM_USER_ID

@receiver(post_save, sender=OrderCallBack)
def send_lead_notification(sender, instance, created, **kwargs):
    if not created:
        return

    try:
        # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
        moscow_time = timezone.localtime(instance.created_at)
        created_at = moscow_time.strftime("%d.%m.%Y %H:%M")
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ +)
        clean_phone = '+7' + re.sub(r'[^\d]', '', instance.phone)[1:]

        message = (
    "<b>üìû –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫</b>\n\n"
    f"<b>–ò–º—è:</b> {html.escape(instance.name)}\n"
    f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{clean_phone}</code>\n"
    f"<b>Email:</b> {html.escape(instance.email) if instance.email else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
    f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {html.escape(instance.message) if instance.message else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {created_at}\n\n"
    "#–æ–±—Ä–∞—Ç–Ω—ã–π_–∑–≤–æ–Ω–æ–∫"
    )
        run(send_telegram_message(
            TELEGRAM_BOT_API_KEY,
            TELEGRAM_USER_ID,
            message,
            parse_mode="HTML"
        ))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}", exc_info=True)

@receiver(post_save, sender=Order)
def send_order_notification(sender, instance, created, **kwargs):
    if not created:
        return

    try:
        moscow_time = timezone.localtime(instance.created_at)
        created_at = moscow_time.strftime("%d.%m.%Y %H:%M")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        clean_phone = '+7' + re.sub(r'[^\d]', '', instance.phone)[1:]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product = instance.product
        product_info = f"{product.name} ({product.price}‚ÇΩ/{product.unit})"
        
        message = (
            "<b>üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
            f"<b>‚Ññ –∑–∞–∫–∞–∑–∞:</b> {instance.id}\n"
            f"<b>–¢–æ–≤–∞—Ä:</b> {html.escape(product_info)}\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {instance.quantity}\n"
            f"<b>–°—É–º–º–∞:</b> {instance.quantity * product.price:.2f}‚ÇΩ\n\n"
            f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {html.escape(instance.name)}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{clean_phone}</code>\n"
            f"<b>Email:</b> {html.escape(instance.email) if instance.email else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–î–∞—Ç–∞:</b> {created_at}\n\n"
            "#–∑–∞–∫–∞–∑"
        )
        
        run(send_telegram_message(
            TELEGRAM_BOT_API_KEY,
            TELEGRAM_USER_ID,
            message,
            parse_mode="HTML"
        ))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ: {e}", exc_info=True)